<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on </title>
    <link>/categories/r/index.xml</link>
    <description>Recent content in R on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Portfolio of Projects</title>
      <link>/2017/02/17/portfolio-of-projects/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/02/17/portfolio-of-projects/</guid>
      <description>

&lt;!--- created with this command:
# blogdown::new_post(&#34;Portfolio of Projects&#34;, categories = c(&#34;R&#34;, &#34;personal&#34;), tags = c(&#34;R&#34;), rmd = FALSE)  ---&gt;

&lt;p&gt;One motivation for creating this blog was to display a portfolio of projects that I have worked
on in the last year or so. I&amp;rsquo;ll list projects here.
The plan is that eventually I will add pages that elaborate each project. I hope that publishing
my projects on this site will nudge me to be a bit more systematic as I execute projects.&lt;/p&gt;

&lt;h3 id=&#34;the-diary-of-samuel-pepys-https-goldin-shinyapps-io-search-pepys&#34;&gt;&lt;a href=&#34;https://goldin.shinyapps.io/Search_Pepys/&#34;&gt;The Diary of Samuel Pepys&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Each morning I read an entry from
&lt;a href=&#34;http://www.pepysdiary.com/&#34;&gt;The Diary of Samuel Pepys&lt;/a&gt; at a wonderful
site created by &lt;a href=&#34;http://www.gyford.com/&#34;&gt;Phil Gyford&lt;/a&gt;. Pepys kept the diary for about ten years during the 1660&amp;rsquo;s.
Inspired by a post by
&lt;a href=&#34;http://juliasilge.com/blog/Life-Changing-Magic/&#34;&gt;Julia Silge&lt;/a&gt;,
I did some simple
text processing on the diary. That became the
occasion for my first shot at creating a Shiny app.
The resulting web page is available &lt;a href=&#34;https://goldin.shinyapps.io/Search_Pepys/&#34;&gt;here&lt;/a&gt;. The code to
create this web page is available on a &lt;a href=&#34;https://github.com/johngoldin/pepys-diary&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had an opportunity to chat with Julia at the RStudio Conference in Orlando. She gave me some suggestions
for some additional things I might do with the diary.&lt;/p&gt;

&lt;h3 id=&#34;souvenirs-of-my-walks-https-goldin-shinyapps-io-walks&#34;&gt;&lt;a href=&#34;https://goldin.shinyapps.io/Walks/&#34;&gt;Souvenirs of My Walks&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img style=&#34;float: right;&#34; src=&#34;../../img/Lake-District.png&#34;, width=&#34;158&#34;, height=&#34;200&#34;&gt;I have always loved to walk. When I retired in 2011 I went on a walking binge.
At the same time, I discovered that a GPS trace
could be a fun souvenir of my walks.
An &lt;a href=&#34;http://mhermans.net/hiking-gpx-r-leaflet.html&#34;&gt;article&lt;/a&gt; I found via &lt;a href=&#34;https://www.r-bloggers.com/&#34;&gt;R Bloggers&lt;/a&gt; led me
to try to keep track of my walks more systematically.
After doing some research on how to access the Flickr API from R,
I was able to display my photos from Flickr on the GPS trace in a Leaflet map.
The result is a Shiny app &lt;a href=&#34;https://goldin.shinyapps.io/Walks/&#34;&gt;here&lt;/a&gt;.
I don&amp;rsquo;t thnk this is of great interest to a stranger, but for me it is a fascinating
picture of my walks. I love to zoom in and see the detail of the map combined with the GPS trace and the photos.
Like a good souvenir, it triggers lots of memories. If I lingered on a bench additional squiggles appear
on the GPS trace showing where I stopped for a spell. I can also see my wrong turns.
The code for the sourvenir walks site is available at a &lt;a href=&#34;https://github.com/johngoldin/Visualizing-Hiking&#34;&gt;GitHub repository&lt;/a&gt;. There are also some &lt;a href=&#34;../../2016/06/28/technical-note--shiny-souvenir-map-of-walks/&#34;&gt;technical notes&lt;/a&gt; and some details on &lt;a href=&#34;../../2016/07/03/using-the-flickr-api-from-r/&#34;&gt;Flickr from R&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;connecticut-data-by-town&#34;&gt;Connecticut Data by Town&lt;/h3&gt;

&lt;p&gt;I did somse exploring to see what kind of data I could find and then created some maps via ggplot2 to display some of that data.&lt;/p&gt;

&lt;h3 id=&#34;census-data-http-rpubs-com-johngoldin-196744&#34;&gt;&lt;a href=&#34;http://rpubs.com/JohnGoldin/196744&#34;&gt;Census Data&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;There is an &lt;a href=&#34;http://cran.r-project.org/web/packages/acs/index.html&#34;&gt;acs package&lt;/a&gt; to access US Census data.
I did a little bit of exploration to see whether I could create maps of New Haven County based on Census data.
Finding the right Census table turned out to be more of a trick than I expected. &lt;a href=&#34;http://rpubs.com/JohnGoldin/196744&#34;&gt;Here&lt;/a&gt; is a plot of New Haven County published to RPubs.&lt;/p&gt;

&lt;p&gt;As I was writing
this summary I found &lt;a href=&#34;http://www.arilamstein.com/blog/2015/11/16/search-census-data-r/&#34;&gt;this blog post&lt;/a&gt;
that might help. I may get back to that later.&lt;/p&gt;

&lt;h3 id=&#34;an-implementation-of-narcissism-in-r&#34;&gt;An Implementation of Narcissism in R&lt;/h3&gt;

&lt;p&gt;Sometimes I just want to play around plotting some data. What data could be more interesting than data about me?
It so happens I have a data series of my daily weight spanning more than 20 years. That&amp;rsquo;s not weird, is it. So I did some charts.&lt;/p&gt;

&lt;h3 id=&#34;jai-alai&#34;&gt;Jai Alai&lt;/h3&gt;

&lt;p&gt;Last but not least is jai alai. Back when I was in graduate school, there were two jai alai frontons in Connecticut, Milford and Bridgeport. Actually at one point there was also a third fronton in Hartford.
There are some unique features to the way betting on jai alai is organized that makes it a bit
tricky to analyze. Back then that seemed more interesting than working on my dissertaton. That period of my
life is long past, but the lure of procrastination is still present. So on serveral occasions I have
plunged back into jai alai. Jai alai was one of the first R projects I worked on after I retired. Recently
I spent another month of my life on jai alai.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using the Flickr API from R</title>
      <link>/2016/07/03/using-the-flickr-api-from-r/</link>
      <pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/07/03/using-the-flickr-api-from-r/</guid>
      <description>&lt;p&gt;There used to be an &lt;a href=&#34;https://github.com/duncantl/Rflickr/blob/master/inst/doc/Rflickr.xml&#34;&gt;Rflickr package&lt;/a&gt;, but it no longer seems to work. It was last updated in 2011. I had a lot of trouble googling information on how to access Flickr from R. &lt;a href=&#34;http://timelyportfolio.github.io/rCharts_Rflickr/iso_httr.html&#34;&gt;This example&lt;/a&gt; really got me started. It is doing very different things that what I wanted to do, so it may be more useful than what I am laying out here, depending on your goal.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;float: right;&#34; src=&#34;../../img/Hadrians-Wall-screenshot.png&#34;, height=&#34;301&#34;, width=&#34;252&#34;&gt;To see where all this is leading, go to my Shiny app which displays &lt;a href=&#34;https://goldin.shinyapps.io/Walks/&#34;&gt;souvenirs of my walks&lt;/a&gt;. Click on a camera
icon and you will see a thumbnail photo from Flickr in a popup. Click on the popup, and you will be taken to the full-sized photo in Flickr. To the right is a screenshot of the app showing a popup photo of Hadrian&amp;rsquo;s Wall. The GPS traces are in orange and red (for two different days).&lt;/p&gt;

&lt;p&gt;Before you can get flickr data into R via their web API, you will need to &lt;a href=&#34;https://www.flickr.com/services/api/misc.api_keys.html&#34;&gt;sign up for a key&lt;/a&gt;. You will get a &lt;code&gt;user_id&lt;/code&gt; and an &lt;code&gt;api_key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I save the &lt;code&gt;user_id&lt;/code&gt; and &lt;code&gt;api_key&lt;/code&gt; in a file that I load before executing the calls to the API. That way I am not showing the &lt;code&gt;api_key&lt;/code&gt; in my code. In the examples below, these are loaded from &lt;code&gt;flickr_values.RData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The gateway to information about accessing Flickr data is via &lt;a href=&#34;https://www.flickr.com/services/api/&#34;&gt;The App Garden&lt;/a&gt; page at &lt;a href=&#34;https://www.flickr.com/&#34;&gt;Flickr&lt;/a&gt;. From that page you can go to the documentation for each call to the API. At the bottom of each documentation page there should be an API Explorer that takes you to a page that lets you try out the API call. See &lt;a href=&#34;https://www.flickr.com/services/api/explore/flickr.photosets.getList&#34;&gt;photosets.getList&lt;/a&gt; as an example. The API Explorer is a huge help and a great tool.&lt;/p&gt;

&lt;p&gt;Here’s the code for an R function that will get a list of photosets (or albums):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(httr)
library(jsonlite)

load(file = &amp;quot;flickr_values.RData&amp;quot;) # to get user_id and api_key for Flickr calls

# test: an_album &amp;lt;- flickr_photosets_getlist(api_key, user_id)
flickr_photosets_getlist &amp;lt;- function(the_api_key = api_key, the_user_id = user_id) {
  # flickr_photosets_getlist returns a data.frame with info on the albums.
  xx &amp;lt;- GET(url=sprintf(
    &amp;quot;https://api.flickr.com/services/rest/?method=flickr.photosets.getList&amp;amp;api_key=%s&amp;amp;user_id=%s&amp;amp;format=json&amp;amp;nojsoncallback=1&amp;quot;
    , the_api_key
    , the_user_id
  )
  ) %&amp;gt;% content(as = &amp;quot;text&amp;quot;) %&amp;gt;%
    fromJSON()  # check that xy$stat == &amp;quot;ok&amp;quot;
  if (xx$stat != &amp;quot;ok&amp;quot;) return(xx$stat)
  albums &amp;lt;- xx$photosets[[5]]
  return(albums)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I get a message that says “No encoding supplied: defaulting to UTF-8.” Based on some googling, I think that’s from the GET call (from httr). I think this will disappear with a future version of httr.&lt;/p&gt;

&lt;p&gt;Now that we have a data.frame that describes the albums, we can go on to get info about the photos in that album. (Remember that a photoset in the lingo of the API corresponds to an album in the terms used by the main Flickr site.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#test:  xx &amp;lt;- flickr_photosets_getphotos(the_photoset_id = &amp;quot;72157657606414684&amp;quot;)
flickr_photosets_getphotos &amp;lt;- function(the_photoset_id = NULL, 
                                       time_start = NULL, 
                                       time_end = NULL, 
                                       the_api_key = api_key, 
                                       the_user_id = user_id) {
  # returns data.frame of photos including datetaken, latitude, longitude, 
  # url_m, height_m, width_m and url_s, height_s, height_m
  xx &amp;lt;- GET(url=sprintf(
    &amp;quot;https://api.flickr.com/services/rest/?method=flickr.photosets.getPhotos&amp;amp;api_key=%s&amp;amp;photoset_id=%s&amp;amp;user_id=%s&amp;amp;extras=%s&amp;amp;format=json&amp;amp;nojsoncallback=1&amp;quot;
    , the_api_key
    , the_photoset_id
    , the_user_id
    , &amp;quot;description,date_taken,geo,url_m,url_s&amp;quot;
  )
  ) %&amp;gt;% content(as = &amp;quot;text&amp;quot;) %&amp;gt;%
    fromJSON()  # check that xx$stat == &amp;quot;ok&amp;quot;
  if (xx$stat != &amp;quot;ok&amp;quot;) {
    print(paste(&amp;quot;Flickr error&amp;quot;, code, message))
    return(xx$stat)
  }
  # description gets returned as a data.frame. I&#39;m not sure why. so get _content
  xx$description &amp;lt;- xx$description[ ,&amp;quot;_content&amp;quot;]
  xx$photoset$photo$datetaken &amp;lt;- ymd_hms(xx$photoset$photo$datetaken)
  xx$photoset$latitude &amp;lt;- as.numeric(xx$photoset$latitude)
  xx$photoset$longitude &amp;lt;- as.numeric(xx$photoset$longitude)
  xx$photoset$photo$latitude &amp;lt;- ifelse(xx$photoset$photo$latitude != 0, xx$photoset$photo$latitude, NA)
  xx$photoset$photo$longitude &amp;lt;- ifelse(xx$photoset$photo$longitude != 0, xx$photoset$photo$longitude, NA)
  if (is.null(time_start) &amp;amp; is.null(time_end)) return(xx$photoset$photo)
  filter(xx$photoset$photo, is.null(time_start) | (datetaken &amp;gt;= time_start), is.null(time_end) | (datetaken &amp;gt;= time_end))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I wanted from Flickr was to be able to show a thumbnail version of a photo to add to a marker on a Leaflet map and then send the person to the photo at the Flickr site if the viewer clicked on the thumbnail.&lt;/p&gt;

&lt;p&gt;The Flickr API constructs URL’s that fetch small or medium sized version of the photo.&lt;/p&gt;

&lt;p&gt;Here is a facsimile of the code I used to add markers to the Leaflet map.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# produce a Flickr URL like the following:
# https://www.flickr.com/photos/99418994@N00/22042568849/in/album-72157657606414684/
photos_in_album_url &amp;lt;- function(album_id, photo_id, user_id) {
  sprintf(&amp;quot;https://www.flickr.com/photos/%s/%s/in/album-%s/&amp;quot;,
                 user_id,
                 photo_id,
                 album_id)
}

add_photos_to_map &amp;lt;- function(photos_df, a_map = null) {
  if (is.null(a_map)) {
    a_map &amp;lt;- leaflet(height = &amp;quot;700px&amp;quot;, width = NULL) %&amp;gt;%
      addProviderTiles(&amp;quot;Thunderforest.Landscape&amp;quot;, group = &amp;quot;Topographical&amp;quot;) %&amp;gt;%
      addProviderTiles(&amp;quot;Esri.WorldImagery&amp;quot;, group = &amp;quot;Satellite&amp;quot;) %&amp;gt;%
      addProviderTiles(&amp;quot;OpenStreetMap.Mapnik&amp;quot;, group = &amp;quot;Road map&amp;quot;) 
  }
  photos_df &amp;lt;- filter(photos_df, !is.na(lng), !is.na(lat), include) # include == TRUE for the photos I want to add.

  # photo_in_album is created by photos_in_album_url().  
  # e.g., xx$trip_photos$photo_in_album &amp;lt;- map2_chr(xx$trip_photos$album_id, xx$trip_photos$id, photos_in_album_url, user_id) (using the purrr package that is part of the Hadleyverse)
  a_map &amp;lt;- addMarkers(m, lng=photos_df$lng, lat= photos_df$lat,  
                  popup = sprintf(&amp;quot;&amp;lt;a href=\&amp;quot;%s\ \&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;
                                  &amp;lt;IMG SRC=\&amp;quot;%s\&amp;quot; ALT=\&amp;quot;%s\&amp;quot; WIDTH=%s HEIGHT=%s&amp;gt;%s &amp;lt;/a&amp;gt;&amp;quot;, 
                                  photos_df$photo_in_album,
                                  photos_df$url_s, 
                                  &amp;quot;Click to go to photo in Flickr&amp;quot;,
                                  photos_df$width_s,
                                  photos_df$height_s,
                                  photos_df$description),  
                  icon = photoIcon, # function providing custom marker-icons
                  group=&#39;Photo markers&#39;)
  a_map
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used these calls to add photo markers a Leaflet map showing souvenirs of my walking holidays.
You can see the results &lt;a href=&#34;https://goldin.shinyapps.io/Walks/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Technical Note--Shiny Souvenir Map of Walks</title>
      <link>/2016/06/28/technical-note--shiny-souvenir-map-of-walks/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/06/28/technical-note--shiny-souvenir-map-of-walks/</guid>
      <description>&lt;p&gt;I have used RStudio’s Shiny to create a &lt;a href=&#34;https://goldin.shinyapps.io/Walks/&#34;&gt;map page&lt;/a&gt; where I can display GPS traces and photos from walks I have done during the last five years.&lt;/p&gt;

&lt;p&gt;The map is based on an example provided by Maarten Hermans in  a &lt;a href=&#34;http://mhermans.net/hiking-gpx-r-leaflet.html&#34;&gt;blog post&lt;/a&gt; that he published last year. The map uses R htmlwidgets that provide access to the Javascript tool Leaflet. The trick is that I don’t have to know very much about either htmlwidgets or Leaflet to make this work.&lt;/p&gt;

&lt;p&gt;Maarten relies on the package rgdal to deal with mapping issues. &lt;a href=&#34;http://www.gdal.org/&#34;&gt;GDAL – Geospatial Data Abstraction Library&lt;/a&gt; is a &lt;a href=&#34;http://www.osgeo.org/gdal_ogr&#34;&gt;big topic&lt;/a&gt;. I had used it previously to convert map coordinates from the projection used in Great Britain to WGS84, the projection used in the US, Google Earth, and Open Street Maps. Via Maarten’s example I learned that I could use an rgdal function (readOGR) to load in GPS tracks in the GPX format. With a bit of googling I picked up a couple of other useful tools. But I still have the barest understanding of what’s involved with GDAL (and the sp package that relies on rgdal). Back when I was first using rgdal I had some problems properly installing the gdal C libraries on OSX. It took a fair amount of googling to get that sorted out.&lt;/p&gt;

&lt;p&gt;The example by Maarten displayed photos from his local server. I wanted to use photos that I had already uploaded to Flickr. There is an API to access Flickr, but at first I had a lot of trouble figuring out how to use it from R. There is an Rflickr package, but it appears to be out of date and no longer functions. Once again googling led me to an &lt;a href=&#34;http://timelyportfolio.github.io/rCharts_Rflickr/iso_httr.html&#34;&gt;example&lt;/a&gt; that unlocked the technique to use the Flickr API from R. As typically happens, this led me into a couple of other technical byways. I used the package &lt;a href=&#34;https://cran.r-project.org/web/packages/httr/index.html&#34;&gt;httr&lt;/a&gt; to interact with the Flickr API. Data is returned via JSON. I had heard of that before, but didn’t really understand its purpose. This led me into the package &lt;a href=&#34;https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html&#34;&gt;jsonlite&lt;/a&gt;. Once I got rolling with the Flickr API I realized that it was very effective and easy to use. Flickr sends me the URL for my pictures and I am able to put that URL into the popup markers that appear on the Leaflet map. The pre-sized photos are only downloaded from Flickr as needed so they popup very quickly.&lt;/p&gt;

&lt;p&gt;My camera has a GPS and many of my photos are geo-tagged (depending on whether the camera had enough time to get a GPS fix). But for the camera icons on the GPS trace I did not rely on the GPS info from the camera. Instead I matched the time of the photo with the time of the points on the GPS trace. This works quite well. The GPS records time in universal (i.e. Greenwich) time while the camera generally records the time in the local time zone. I had to adjust for those time difference and sometimes adjust for the fact that in some cases I had the camera set on a wacky time zone.&lt;/p&gt;

&lt;p&gt;As always my R code relies on the suite of packages created by &lt;a href=&#34;http://priceonomics.com/hadley-wickham-the-man-who-revolutionized-r/&#34;&gt;Hadley Wickham&lt;/a&gt;. I operate in the Hadleyverse. For this project httr was yet another &lt;a href=&#34;http://adolfoalvarez.cl/the-hitchhikers-guide-to-the-hadleyverse/&#34;&gt;hadleyverse&lt;/a&gt; package that turned out to do exactly what I needed to do even before I knew I needed it to cope with the Flickr API. (And as an update I will note that we are supposed to refer to the &lt;em&gt;tidyverse&lt;/em&gt; rather than the &lt;em&gt;hadleyverse&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;There are a number tools that put photos on a map with an effect similar to what is displayed here. Flickr has some views that emphasize photos located on maps. If you have a photo that is tagged with longitude and latitude Flickr will show a map view showing other photos in the same location. It is interesting to note that the Flickr map views also rely on the same &lt;a href=&#34;http://leafletjs.com/&#34;&gt;Leaflet technology&lt;/a&gt; used for this project. (Leaflet is more commonly used with languages other than R.)&lt;/p&gt;

&lt;p&gt;I first did a &lt;a href=&#34;http://rpubs.com/JohnGoldin/149745&#34;&gt;version of the maps&lt;/a&gt; using RMarkdown to publish to the RStudio RPubs site. Fortunately this spring I decided to take the plunge and learn about Shiny. Shiny is a much more natural way to allow me to navigate among the map locations. This is my second Shiny app. (The first was a tool to allow regular expression &lt;a href=&#34;https://goldin.shinyapps.io/Search_Pepys/&#34;&gt;search of The Diary of Samuel Pepys&lt;/a&gt;.) Initially I had a version that worked great on my local machine, but failed when I tried to publish it to the shinyapps.io server. I posted a question to the Shiny Google group and got a helpful response from Joe Chang (the author of Shiny) in under a minute. In my initial version, I created a Leaflet map object and saved it to disk. The Shiny server would then load that object. But it turns out that the Leaflet map object depends on the local file structure so that when I copied that object to the Shiny server it no longer worked. I had to rearrange my code. First I had to assemble the geo-location info from GPS traces and the photo information from Flickr and save that as a data file that I could move to the Shiny server. On the Shiny server I create a Leaflet map and then use that data to add GPS traces and photo markers to the Leaflet map. It takes a noticeable amount of time each time the Shiny app starts up.&lt;/p&gt;

&lt;p&gt;See this post for code examples on &lt;a href=&#34;../../2016/07/03/using-the-flickr-api-from-r/&#34;&gt;how to access Flickr from R&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>